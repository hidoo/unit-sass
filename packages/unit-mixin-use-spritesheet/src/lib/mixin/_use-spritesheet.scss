/// use spritesheet settings
/// @param {String} $type type of spritesheet
/// @param {String} $name name of spritesheet item
/// @param {Map} $options [()] options
///   @param {Boolean} $options.use2x [false] use 2x image or not
///   @param {Boolean} $options.responsive [false] responsive or not
///   @param {List} $options.capturing-selectors [("a", "button")] capturing parent selectors
///
/// @example scss
///   // format of spritesheets values
///   $sprites: (
///      // output each by files of spritesheet
///     "icon-image": (
///       "image": "path/to/sprite/icon-image.png",
///       "items": (
///         // output each by items
///         "logo": (
///           "width": 10px,
///           "height": 10px,
///           "total-width": 30px,
///           "total-height": 30px,
///           "offset-x": -10px,
///           "offset-y": -10px
///         ),
///         ...
///       )
///     ),
///     ...
///   );
///
///    // use this
///   .selector {
///     @include use-spritesheet($type: "icon-image", $name: "logo");
///   }
///   // -> .selector-logo {
///   //      overflow: hidden;
///   //      text-indent: -100%;
///   //      color: transparent;
///   //      background-image: url(path/to/sprite/icon-image.png);
///   //    }
///   //    .selector-logo {
///   //      width: 10px;
///   //      height: 10px;
///   //      background-position: -10px -10px;
///   //      background-size: 30px 30px;
///   //    }
///
@mixin use-spritesheet($type, $name, $options: ()) {
  $default-options: (
    "use2x": false,
    "responsive": false,
    "capturing-selectors": ()
  );

  @if not mixin-exists("define-placeholder") {
    @error "@mixin use-spritesheet: @mixin define-placeholder is required.";
  }

  @if not function-exists("_use-spritesheet-resolve-spritesheets") {
    @error "@mixin use-spritesheet: @function _use-spritesheet-resolve-spritesheets is required.";
  }

  @if not function-exists("_use-spritesheet-get-sheet-by-type") {
    @error "@mixin use-spritesheet: @function _use-spritesheet-get-sheet-by-type is required.";
  }

  @if not mixin-exists("_use-spritesheet-define") {
    @error "@mixin use-spritesheet: @mixin _use-spritesheet-define is required.";
  }

  @if not mixin-exists("_use-spritesheet-define-responsive") {
    @error "@mixin use-spritesheet: @mixin _use-spritesheet-define-responsive is required.";
  }

  @if type-of($type) != "string" or $type == "" {
    @error "@mixin use-spritesheet: Argument $type must be valid string. (specified: #{inspect($type)})";
  }

  @if type-of($name) != "string" or $name == "" {
    @error "@mixin use-spritesheet: Argument $name must be valid string. (specified: #{inspect($name)})";
  }

  // resolve spritesheets value
  $spritesheets: _use-spritesheet-resolve-spritesheets();

  // normalize options
  $options: map-merge($default-options, $options);

  @if $spritesheets {
    $sheet-by-type: _use-spritesheet-get-sheet-by-type($type, $spritesheets);

    @if $sheet-by-type {
      $image: map-get($sheet-by-type, "image");
      $items: map-get($sheet-by-type, "items");

      @include define-placeholder($name: $type) {
        overflow: hidden;
        text-indent: -100%;
        color: transparent;
        background-image: url(#{$image});
      }

      @if map-get($options, "responsive") {
        @include _use-spritesheet-define-responsive(
          $name: $name,
          $items: $items,
          $options: $options
        ) {
          @extend %#{$type};
        }
      }
      @else {
        @include _use-spritesheet-define(
          $name: $name,
          $items: $items,
          $options: $options
        ) {
          @extend %#{$type};
        }
      }
    }
    @else {
      @warn "@mixin use-spritesheet: Spritesheet '#{$name}' is not generate, because $type: '#{$type}' is not found.";
    }
  }
  @else {
    @warn "@mixin use-spritesheet: Spritesheet '#{$name}' is not generate, because spritesheets value is not found.";
  }
}
