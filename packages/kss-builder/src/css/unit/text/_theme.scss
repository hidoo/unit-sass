@use "sass:map";
@use "@hidoo/unit/src/lib/mixin" as unit-mixin;
@use "../../lib/mixin";
@use "../../settings";

/*
modifiers: theme

modifiers of theme for kss-unit-text

Weight: -99

Markup: <h1 class="kss-unit-text  {{modifier_class}}">Lorem ipsum dolor sit amet.</h1>
<p class="kss-unit-text  {{modifier_class}}">あのイーハトーヴォのすきとおった風、夏でも底に冷たさをもつ青いそら、うつくしい森で飾られたモーリオ市、郊外のぎらぎらひかる草の波。</p>

kss-unit-text--theme-a-a-a - generic text color (themeable)
kss-unit-text--theme-a-a-b - numeric text color (themeable)
kss-unit-text--theme-a-a-c - alert text color (themeable)
kss-unit-text--theme-a-a-d - warning text color (themeable)
kss-unit-text--theme-a-a-e - accent text color (themeable)
kss-unit-text--theme-b-a-a - code text color with background (themeable)

Style guide: kss-unit-text.theme.extend
*/
.kss-unit-text--theme {
  &-a-a {
    &-a {
      @include mixin.on-theme("light") {
        $theme: map.get(settings.$kss-theme-color-scheme, "light");

        color: map.get($theme, "color");
      }

      @include mixin.on-theme("dark") {
        $theme: map.get(settings.$kss-theme-color-scheme, "dark");

        color: map.get($theme, "color");
      }
    }

    &-b {
      @include mixin.on-theme("light") {
        $theme: map.get(settings.$kss-theme-color-scheme, "light");

        color: map.get($theme, "border-color-focus");
      }

      @include mixin.on-theme("dark") {
        $theme: map.get(settings.$kss-theme-color-scheme, "dark");

        color: map.get($theme, "border-color-focus");
      }

      @include unit-mixin.on-current() {
        @include mixin.on-theme("light") {
          $theme: map.get(settings.$kss-theme-color-scheme, "light");

          color: map.get($theme, "accent-color");
        }

        @include mixin.on-theme("dark") {
          $theme: map.get(settings.$kss-theme-color-scheme, "dark");

          color: map.get($theme, "accent-color");
        }
      }
    }

    &-c {
      @include mixin.on-theme("light") {
        $theme: map.get(settings.$kss-theme-color-scheme, "light");

        color: map.get($theme, "alert-color");
      }

      @include mixin.on-theme("dark") {
        $theme: map.get(settings.$kss-theme-color-scheme, "dark");

        color: map.get($theme, "alert-color");
      }
    }

    &-d {
      @include mixin.on-theme("light") {
        $theme: map.get(settings.$kss-theme-color-scheme, "light");

        color: map.get($theme, "warning-color");
      }

      @include mixin.on-theme("dark") {
        $theme: map.get(settings.$kss-theme-color-scheme, "dark");

        color: map.get($theme, "warning-color");
      }
    }

    &-e {
      @include mixin.on-theme("light") {
        $theme: map.get(settings.$kss-theme-color-scheme, "light");

        color: map.get($theme, "accent-color");
      }

      @include mixin.on-theme("dark") {
        $theme: map.get(settings.$kss-theme-color-scheme, "dark");

        color: map.get($theme, "accent-color");
      }
    }
  }

  &-b-a {
    &-a {
      padding: 2px 4px;
      white-space: nowrap;
      border: 0;
      border-radius: 2px;

      @include mixin.on-theme("light") {
        $theme: map.get(settings.$kss-theme-color-scheme, "light");

        color: map.get($theme, "color-focus");
        background-color: map.get($theme, "background-color-focus");
      }

      @include mixin.on-theme("dark") {
        $theme: map.get(settings.$kss-theme-color-scheme, "dark");

        color: map.get($theme, "color-focus");
        background-color: map.get($theme, "background-color-focus");
      }
    }
  }
}
