////
/// (c) hidoo | MIT Lisence
/// @group kssbuilder
////

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "@hidoo/unit/src/lib/mixin" as unit-mixin;
@use "../../settings";

/// wrappper of theme state class like `is-theme-light`
/// @param {String} $state ["light"] - state keyword (one of `"light"`, `"dark"`, `"example-light"`, `"example-dark"`, `"example-light-transparent"` or `"example-dark-transparent"`)
/// @param {List} $capturing-selectors [()] - capturing parent selectors
///
/// @example scss - scss inputs
///   .selector {
///     @include on-theme("light") {
///       font-size: 16px;
///     }
///   }
///
/// @example css - css outputs
///   .selector.is-theme-light {
///     font-size: 16px;
///   }
///
@mixin on-theme(
  $state: "light",
  $capturing-selectors: ()
) {
  @if meta.type-of(settings.$kss-state-selectors-theme) != "map" {
    @error "@mixin on-theme: settings.$kss-state-selectors-theme must be map.";
  }

  $states: map.keys(settings.$kss-state-selectors-theme);

  @if meta.type-of(settings.$kss-root-selectors) != "list" {
    @error "@mixin on-theme: settings.$kss-root-selectors must be list.";
  }

  @if not list.index($states, $state) {
    @error "@mixin on-theme: Argument $state is one of #{list.join($states, $separator: comma)}.";
  }

  $selectors: map.get(settings.$kss-state-selectors-theme, $state);

  @if length($capturing-selectors) == 0 {
    $capturing-selectors: settings.$kss-root-selectors;
  }

  @include unit-mixin.on($selectors: $selectors, $capturing-selectors: $capturing-selectors) {
    @content;
  }
}
