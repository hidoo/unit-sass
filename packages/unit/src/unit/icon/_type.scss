@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "../../lib/mixin";
@use "../../settings";

/*
type

type modifiers of #{settings.$prefix}-icon

Weight: -99

Style guide: #{settings.$prefix}-icon.type
*/

/*
modifiers: type

builtin modifiers of type for #{settings.$prefix}-icon

Weight: -100

Markup: <span class="#{settings.$prefix}-icon  {{modifier_class}}"></span>

#{settings.$prefix}-icon--type-arrow-light - light arrow
#{settings.$prefix}-icon--type-arrow-dark - dark arrow

Style guide: #{settings.$prefix}-icon.type.builtin
*/
.#{settings.$prefix}-icon--type { // stylelint-disable-line scss/selector-nest-combinators
  &-arrow {
    $selector: string.unique-id();

    @include mixin.define-placeholder($name: $selector) {
      width: 12.72px;
      height: 10px;

      &::before,
      &::after {
        content: "";
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        transform-origin: 0 0;
        transform: translate(6.36px, 0) rotate(45deg);
      }

      &::before {
        width: 9px;
        height: 2px;
      }

      &::after {
        width: 2px;
        height: 9px;
      }
    }

    @if meta.type-of(settings.$builtin-themes) == "map" {
      @each $name, $theme in settings.$builtin-themes {
        $color: map.get($theme, "color");
        $color-focus: map.get($theme, "color-focus");

        &-#{$name} {
          @extend %#{$selector};

          &::before,
          &::after {
            background-color: $color;
          }

          @include mixin.on-focus($capturing-selectors: ("a", "button")) {
            &::before,
            &::after {
              background-color: $color-focus;
            }
          }
        }
      }
    }
  }
}
