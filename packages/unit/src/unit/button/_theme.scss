@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "../../lib/mixin";
@use "../../settings";

/*
theme

theme modifiers of #{settings.$prefix}-button

Weight: -99

Style guide: #{settings.$prefix}-button.theme
*/

/*
modifiers: theme

builtin modifiers of theme for #{settings.$prefix}-button

Weight: -100

Markup: <!-- link element -->
<a class="#{settings.$prefix}-button  {{modifier_class}}" href="javascript:;">
  <span class="#{settings.$prefix}-button__label  #{settings.$prefix}-text">Lorem ipsum dolor sit amet.</span>
</a>
<!-- button element -->
<button class="#{settings.$prefix}-button  {{modifier_class}}">
  <span class="#{settings.$prefix}-button__label  #{settings.$prefix}-text">Lorem ipsum dolor sit amet.</span>
</button>

#{settings.$prefix}-button--theme-light - light theme
#{settings.$prefix}-button--theme-dark - dark theme

Style guide: #{settings.$prefix}-button.theme.builtin
*/
.#{settings.$prefix}-button--theme { // stylelint-disable-line scss/selector-nest-combinators
  $selector: string.unique-id();

  @include mixin.placeholder-define($name: $selector) {
    padding: 10px;
    border-radius: 3px;
    transition-duration: 0.1s;
    transition-property: background-color;
    transition-timing-function: ease-out;
  }

  @if meta.type-of(settings.$builtin-themes) == "map" {
    @each $name, $theme in settings.$builtin-themes {
      $color: map.get($theme, "color");
      $background: map.get($theme, "background");
      $background-focus: map.get($theme, "background-focus");
      $border: map.get($theme, "border");
      $border-focus: map.get($theme, "border-focus");

      &-#{$name} {
        @extend %#{$selector};

        color: $color;
        background-color: $background;
        border: 1px solid $border;

        @include mixin.on-focus($capturing-selectors: ("a", "button")) {
          background-color: $background-focus;
          border-color: $border-focus;
        }
      }
    }
  }
}
