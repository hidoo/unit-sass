////
/// (c) hidoo | MIT Lisence
/// @group features
////

/// return merged state selectors
/// @param {String} $type ["link"] - type of state (one of `"link"`, `"focus"`, `"selected"`, `"disabled"` or `"current"`)
/// @param {List} $additional-selectors [()] - additional selectors
/// @return {List}
///
/// @example scss - scss inputs
///   $merged-focus-selectors: merge-state-selectors("link"); // -> (":link", ":visited")
///
@function merge-state-selectors($type: "focus", $additional-selectors: ()) {
  @if not index(("link", "focus", "selected", "disabled", "current"), $type) {
    @error "@function merge-state-selectors: Argument $type must be one of 'link', focus', 'selected', disabled' or 'current'. (specified: #{inspect($type)})";
  }

  $selectors: ();

  @if $type == "link" {
    $selectors: join($selectors, (":link", ":visited"));
  }
  @else if $type == "focus" {
    $selectors: join($selectors, (":hover", ":focus"));

    @if global-variable-exists("unit-state-selectors-focus") {
      $selectors: join($selectors, $unit-state-selectors-focus);
    }
  }
  @else if $type == "selected" {
    $selectors: join($selectors, (":checked",));

    @if global-variable-exists("unit-state-selectors-selected") {
      $selectors: join($selectors, $unit-state-selectors-selected);
    }
  }
  @else if $type == "disabled" {
    $selectors: join($selectors, (":disabled",));

    @if global-variable-exists("unit-state-selectors-disabled") {
      $selectors: join($selectors, $unit-state-selectors-disabled);
    }
  }
  @else if $type == "current" {
    @if global-variable-exists("unit-state-selectors-current") {
      $selectors: join($selectors, $unit-state-selectors-current);
    }
  }

  @return join($selectors, $additional-selectors);
}
