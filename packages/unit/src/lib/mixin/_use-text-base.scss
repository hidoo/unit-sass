/// use settings of initialized text
/// @param {Number} $letter-spacing setting for letter-spacing [$unit-letter-spacing]
/// @param {Number|String} $line-height setting for line-height [$unit-line-height]
/// @param {String} $text-align setting for text-align ["left"] ("left"|"center"|"right")
/// @param {String} $text-decoration setting for text-decoration ["none"]
/// @param {Number} $text-indent setting for text-indent [0]
/// @param {String} $white-space setting for white-space ["normal"]
/// @param {String} $word-wrap setting for word-wrap ["break-word"]
///
/// @example
///   @include use-text-base();
@mixin use-text-base(
  $letter-spacing: null,
  $line-height: null,
  $text-align: "left",
  $text-decoration: "none",
  $text-indent: 0,
  $white-space: "normal",
  $word-wrap: "break-word"
) {
  // normalize $letter-spacing
  @if not $letter-spacing {
    @if global-variable-exists("unit-letter-spacing") and $unit-letter-spacing {
      $letter-spacing: $unit-letter-spacing;
    }
    @else {
      $letter-spacing: 0.04em;

      @warn "@mixin use-text-base: $letter-spacing set #{$letter-spacing}, bacause global variable $unit-letter-spacing is undefined.";
    }
  }

  // normalize $line-height
  @if not $line-height {
    @if global-variable-exists("unit-line-height") and $unit-line-height {
      $line-height: $unit-line-height;
    }
    @else {
      $line-height: 1.5;

      @warn "@mixin use-text-base: $line-height set #{$line-height}, bacause global variable $unit-line-height is undefined.";
    }
  }

  letter-spacing: #{$letter-spacing};
  line-height: #{$line-height};
  text-align: #{$text-align};
  text-decoration: #{$text-decoration};
  text-indent: #{$text-indent};

  // set white-space property only if $white-space is valid string
  @if type-of($white-space) == "string" and $white-space != "" {
    white-space: #{$white-space};
  }

  // set word-wrap property only if $word-wrap is valid string
  @if type-of($word-wrap) == "string" and $word-wrap != "" {
    word-wrap: #{$word-wrap};
  }
}
