////
/// (c) hidoo | MIT Lisence
/// @group plugin/spritesheet
////

@use "sass:map";
@use "sass:string";
@use "../../../../lib/function" as unit-function;
@use "../../../../lib/mixin" as unit-mixin;
@use "../../../../settings" as unit-settings;
@use "./set-properties" as mixin;

/// define toggle item
/// @access private
/// @param {String} $name name of spritesheet item
/// @param {Map} $items [()] spritesheet items
/// @param {Map} $options [()] options
///
@mixin define-toggle-item($name, $items: (), $options: ()) {
  $selectors-focus: unit-function.merge-state-selectors("focus");
  $selectors-disabled: unit-function.merge-state-selectors("disabled");
  $selectors-selected: unit-function.merge-state-selectors("selected");

  @if map.has-key($items, $name) {
    $up: map.get($items, $name);
    $focus: map.get($items, "#{$name}--focus");
    $disabled: map.get($items, "#{$name}--disabled");
    $selected: map.get($items, "#{$name}--selected");
    $selected--focus: map.get($items, "#{$name}--selected--focus");
    $selected--disabled: map.get($items, "#{$name}--selected--disabled");
    $use2x: map.get($options, "use2x");

    &-#{$name} {
      @content;

      @if $up {
        > .#{unit-settings.$prefix}-toggle__field { // stylelint-disable-line scss/selector-nest-combinators
          + .#{unit-settings.$prefix}-toggle__alt { // stylelint-disable-line scss/selector-nest-combinators
            @include mixin.set-properties(
              $values: $up,
              $use2x: $use2x == true
            );
          }
        }
      }

      // when focus
      @if $focus {
        $selector: string.unique-id();

        @include unit-mixin.define-placeholder($name: $selector) {
          @include mixin.set-properties(
            $values: (
              "offset-x": map.get($focus, "offset-x"),
              "offset-y": map.get($focus, "offset-y")
            ),
            $use2x: $use2x == true
          );
        }

        @each $state in $selectors-focus {
          > .#{unit-settings.$prefix}-toggle__field#{$state} {
            + .#{unit-settings.$prefix}-toggle__alt { // stylelint-disable-line scss/selector-nest-combinators
              @extend %#{$selector};
            }
          }
        }
      }

      // when disabled
      @if $disabled {
        $selector: string.unique-id();

        @include unit-mixin.define-placeholder($name: $selector) {
          @include mixin.set-properties(
            $values: (
              "offset-x": map.get($disabled, "offset-x"),
              "offset-y": map.get($disabled, "offset-y")
            ),
            $use2x: $use2x == true
          );
        }

        @each $state in $selectors-disabled {
          > .#{unit-settings.$prefix}-toggle__field#{$state} {
            + .#{unit-settings.$prefix}-toggle__alt { // stylelint-disable-line scss/selector-nest-combinators
              @extend %#{$selector};
            }
          }
        }
      }

      // when selected
      @if $selected {
        $selector: string.unique-id();

        @include unit-mixin.define-placeholder($name: $selector) {
          @include mixin.set-properties(
            $values: (
              "offset-x": map.get($selected, "offset-x"),
              "offset-y": map.get($selected, "offset-y")
            ),
            $use2x: $use2x == true
          );
        }

        @each $state in $selectors-selected {
          > .#{unit-settings.$prefix}-toggle__field#{$state} {
            + .#{unit-settings.$prefix}-toggle__alt { // stylelint-disable-line scss/selector-nest-combinators
              @extend %#{$selector};
            }
          }
        }
      }

      // when selected and focus
      @if $selected--focus {
        $selector: string.unique-id();

        @include unit-mixin.define-placeholder($name: $selector) {
          @include mixin.set-properties(
            $values: (
              "offset-x": map.get($selected--focus, "offset-x"),
              "offset-y": map.get($selected--focus, "offset-y")
            ),
            $use2x: $use2x == true
          );
        }

        @each $state-selected in $selectors-selected {
          @each $state in $selectors-focus {
            > .#{unit-settings.$prefix}-toggle__field#{$state-selected}#{$state} {
              + .#{unit-settings.$prefix}-toggle__alt { // stylelint-disable-line scss/selector-nest-combinators
                @extend %#{$selector};
              }
            }
          }
        }
      }

      // when selected and disabled
      @if $selected--disabled {
        $selector: string.unique-id();

        @include unit-mixin.define-placeholder($name: $selector) {
          @include mixin.set-properties(
            $values: (
              "offset-x": map.get($selected--disabled, "offset-x"),
              "offset-y": map.get($selected--disabled, "offset-y")
            ),
            $use2x: $use2x == true
          );
        }

        @each $state-selected in $selectors-selected {
          @each $state in $selectors-disabled {
            > .#{unit-settings.$prefix}-toggle__field#{$state-selected}#{$state} {
              + .#{unit-settings.$prefix}-toggle__alt { // stylelint-disable-line scss/selector-nest-combinators
                @extend %#{$selector};
              }
            }
          }
        }
      }
    }
  }
  @else {
    @warn "@mixin define-toggle-item: Spritesheet '#{$name}' was not generate, because $name: '#{$name}' is not found.";
  }
}
