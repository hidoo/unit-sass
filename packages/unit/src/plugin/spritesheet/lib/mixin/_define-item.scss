////
/// (c) hidoo | MIT Lisence
/// @group plugin/spritesheet
////

@use "sass:map";
@use "../../../../lib/mixin" as unit-mixin;
@use "./set-properties" as mixin;

/// define item
/// @access private
/// @param {String} $name name of spritesheet item
/// @param {Map} $items [()] spritesheet items
/// @param {Map} $options [()] options
///
@mixin define-item($name, $items: (), $options: ()) {
  @if map.has-key($items, $name) {
    $up: map.get($items, $name);
    $focus: map.get($items, "#{$name}--focus");
    $current: map.get($items, "#{$name}--current");
    $disabled: map.get($items, "#{$name}--disabled");
    $use2x: map.get($options, "use2x");
    $capturing-selectors: map.get($options, "capturing-selectors");

    &-#{$name} {
      @content;

      @if $up {
        @include mixin.set-properties(
          $values: $up,
          $use2x: $use2x == true
        );
      }

      @if $focus {
        @include unit-mixin.on-focus($capturing-selectors: $capturing-selectors) {
          @include mixin.set-properties(
            $values: (
              "offset-x": map.get($focus, "offset-x"),
              "offset-y": map.get($focus, "offset-y")
            ),
            $use2x: $use2x == true
          );
        }
      }

      @if $current {
        @include unit-mixin.on-current($capturing-selectors: $capturing-selectors) {
          @include mixin.set-properties(
            $values: (
              "offset-x": map.get($current, "offset-x"),
              "offset-y": map.get($current, "offset-y")
            ),
            $use2x: $use2x == true
          );
        }
      }

      @if $disabled {
        @include unit-mixin.on-disabled($capturing-selectors: $capturing-selectors) {
          @include mixin.set-properties(
            $values: (
              "offset-x": map.get($disabled, "offset-x"),
              "offset-y": map.get($disabled, "offset-y")
            ),
            $use2x: $use2x == true
          );
        }
      }
    }
  }
  @else {
    @warn "@mixin define-item: Spritesheet '#{$name}' was not generate, because $name: '#{$name}' is not found.";
  }
}
