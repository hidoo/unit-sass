@use "../lib/mixin";
@use "../settings";

/*
height

utilities that tweek of height

Weight: -97

Style guide: #{settings.$util-prefix}.height
*/

/*
modifiers: height

builtin modifiers of height.
(0 to 150px in 25px steps, 200px to 450px in 50px steps, 500px to 1000px in 100px steps)

Weight: -100

Markup: <div style="position:relative; padding:50px;">
  <div class="{{modifier_class}}" style="position:relative; width:50px; height:50px; background:#999;"></div>
</div>

#{settings.$util-prefix}--height-0 - 0px height
#{settings.$util-prefix}--height-min-0 - 0px min height
#{settings.$util-prefix}--height-max-0 - 0px max height
#{settings.$util-prefix}--height-1000 - 1000px height
#{settings.$util-prefix}--height-min-1000 - 1000px min height
#{settings.$util-prefix}--height-max-1000 - 1000px max height
#{settings.$util-prefix}--height-fit - 100% height
#{settings.$util-prefix}--height-min-fit - 100% min height
#{settings.$util-prefix}--height-max-fit - 100% max height
#{settings.$util-prefix}--height-auto - auto height

Style guide: #{settings.$util-prefix}.height.builtin
*/
.#{settings.$util-prefix}--height { // stylelint-disable-line scss/selector-nest-combinators
  // each by sizes
  @include mixin.size-define($type: "height", $values: settings.$util-box-sizes);

  &-fit {
    height: 100% !important;
  }

  &-min-fit {
    min-height: 100% !important;
  }

  &-max-fit {
    max-height: 100% !important;
  }

  &-auto {
    height: auto !important;
  }
}
